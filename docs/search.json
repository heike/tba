[{"path":"https://heike.github.io/tba/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 tba authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://heike.github.io/tba/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Heike Hofmann. Author, maintainer.","code":""},{"path":"https://heike.github.io/tba/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hofmann H (2025). tba: Access Data Models Blue Alliance First Robotics Division. R package version 0.0.0.9000, https://heike.github.io/tba/, https://github.com/heike/tba/.","code":"@Manual{,   title = {tba: Access to Data and Models for The Blue Alliance First Robotics Division},   author = {Heike Hofmann},   year = {2025},   note = {R package version 0.0.0.9000, https://heike.github.io/tba/},   url = {https://github.com/heike/tba/}, }"},{"path":"https://heike.github.io/tba/index.html","id":"tba","dir":"","previous_headings":"","what":"Access to Data and Models for The Blue Alliance First Robotics Division","title":"Access to Data and Models for The Blue Alliance First Robotics Division","text":"goal tba package provide easy access match data events run first robotics division. Access based Read API v3 Blue Alliance.","code":""},{"path":"https://heike.github.io/tba/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Access to Data and Models for The Blue Alliance First Robotics Division","text":"can install development version tba GitHub : order access API Blue Alliance, need sign (free) account. run","code":"# install.packages(\"pak\") pak::pak(\"heike/tba\") tba::set_api_key(key = \"jnn1ZiUfqPuA9UJyV9EVa3jtL5qudBBlYXKPEVQDeQgQgz5L8BypwjTzVKxtCs3W\")  # key is not valid, get your own!"},{"path":"https://heike.github.io/tba/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Access to Data and Models for The Blue Alliance First Robotics Division","text":"basic example shows solve common problem:","code":"library(tba) ## basic example code  # Team Neutrino has team code `frc3928`  get_records(\"team/frc3928\") #> # A tibble: 1 × 11 #>   city  country key     name        nickname postal_code rookie_year school_name #>   <chr> <chr>   <chr>   <chr>       <chr>    <chr>             <int> <chr>       #> 1 Ames  USA     frc3928 Iowa 4-H F… Team Ne… 50011              2012 4-H         #> # ℹ 3 more variables: state_prov <chr>, team_number <int>, website <chr>  # In the 2024 season, the team attended the following events: events <- get_records(\"team/frc3928/events/2024\") events$name #> [1] \"Cow Town Throwdown\"        \"Galileo Division\"          #> [3] \"Iowa Regional\"             \"Clash in the Corn\"         #> [5] \"Central Missouri Regional\" events$event_code #> [1] \"cttd\"  \"gal\"   \"iacf\"  \"iawes\" \"mose\""},{"path":"https://heike.github.io/tba/index.html","id":"access-score-data-from-a-competition","dir":"","previous_headings":"Example","what":"Access Score Data from a Competition","title":"Access to Data and Models for The Blue Alliance First Robotics Division","text":"matches Clash Corn can accessed using event code 2024iawes: function get_match_details turns records manageable form turning match-based rows get_records results team-based results, .e. every row corresponds detailed scores team one matches:","code":"library(dplyr) matches <- get_records(\"event/2024iawes/matches\") count(matches, comp_level) #> # A tibble: 3 × 2 #>   comp_level     n #>   <chr>      <int> #> 1 f              2 #> 2 qm            22 #> 3 sf             5 # 22 qualifying matches # 5 semi-finals # 2 finals scores <- get_match_details(matches) head(scores %>% select(comp_level, match_number, set_number, alliance, team_key, score, ends_with(\"Points\"))) #> # A tibble: 6 × 25 #>   comp_level match_number set_number alliance team_key score adjustPoints #>   <chr>             <int>      <int> <chr>    <chr>    <int>        <int> #> 1 f                     1          1 blue     frc9998     38            0 #> 2 f                     1          1 blue     frc6419     38            0 #> 3 f                     1          1 blue     frc4646     38            0 #> 4 f                     2          1 blue     frc9998     44            0 #> 5 f                     2          1 blue     frc6419     44            0 #> 6 f                     2          1 blue     frc4646     44            0 #> # ℹ 18 more variables: autoAmpNotePoints <int>, autoLeavePoints <int>, #> #   autoPoints <int>, autoSpeakerNotePoints <int>, autoTotalNotePoints <int>, #> #   endGameHarmonyPoints <int>, endGameNoteInTrapPoints <int>, #> #   endGameOnStagePoints <int>, endGameParkPoints <int>, #> #   endGameSpotLightBonusPoints <int>, endGameTotalStagePoints <int>, #> #   foulPoints <int>, teleopAmpNotePoints <int>, teleopPoints <int>, #> #   teleopSpeakerNoteAmplifiedPoints <int>, teleopSpeakerNotePoints <int>, …"},{"path":"https://heike.github.io/tba/index.html","id":"calculate-a-teams-contribution-to-an-outcome","dir":"","previous_headings":"Example","what":"Calculate a team’s contribution to an outcome","title":"Access to Data and Models for The Blue Alliance First Robotics Division","text":"function get_ranking_by allows ranking team (alliance!) numeric variable. makes sense use matches qualifying round. resulting number estimate team’s contribution chosen measurement. using get_ranking_by score qualifying matches, resulting coefficients ranking Offesnive Power Rating (OPR) - published TBA API insights. makes sense, include points fouls (assuming hard make another team foul one’s alliance): time, resulting ranking quite similar, differences rankings might give insight whether teams profitted fouled qualification round. example, rankings stay , 2nd 3rd team switch places: frc5041 seems benefitted qualifying matches opponents’ fouls frc4646. rating contribution team’s score without counting fouls quite similar.","code":"# ranking by OPR scores %>% filter(comp_level==\"qm\") %>%   get_ranking_by(score) #> # A tibble: 12 × 3 #>    team_key     n `rating(score)` #>    <chr>    <int>           <dbl> #>  1 frc3928     11           24.8  #>  2 frc5041     11           23.8  #>  3 frc4646     11           17.2  #>  4 frc525      11           16.5  #>  5 frc6419     11           15.4  #>  6 frc6317     11           14.3  #>  7 frc9999     11           13.7  #>  8 frc9997     11            9.06 #>  9 frc9998     11            7.14 #> 10 frc9996     11            2.86 #> 11 frc967      11            2.58 #> 12 frc9995     11            2.32 no_fouls <- scores %>% filter(comp_level == \"qm\") %>%   get_ranking_by(score - foulPoints) head(no_fouls) #> # A tibble: 6 × 3 #>   team_key     n `rating(score - foulPoints)` #>   <chr>    <int>                        <dbl> #> 1 frc3928     11                         23.6 #> 2 frc4646     11                         19.4 #> 3 frc5041     11                         19.1 #> 4 frc525      11                         17.5 #> 5 frc6317     11                         12.7 #> 6 frc6419     11                         11.9 scores %>% filter(comp_level==\"qm\") %>%   get_ranking_by(score-foulPoints) #> # A tibble: 12 × 3 #>    team_key     n `rating(score - foulPoints)` #>    <chr>    <int>                        <dbl> #>  1 frc3928     11                       23.6   #>  2 frc4646     11                       19.4   #>  3 frc5041     11                       19.1   #>  4 frc525      11                       17.5   #>  5 frc6317     11                       12.7   #>  6 frc6419     11                       11.9   #>  7 frc9999     11                       10.7   #>  8 frc9997     11                        6.37  #>  9 frc9998     11                        5.96  #> 10 frc967      11                        2.44  #> 11 frc9996     11                       -0.409 #> 12 frc9995     11                       -2.54"},{"path":"https://heike.github.io/tba/index.html","id":"comparing-multiple-outcomes","dir":"","previous_headings":"Example","what":"Comparing Multiple Outcomes","title":"Access to Data and Models for The Blue Alliance First Robotics Division","text":"comparing two measures visually also see, big gap top two teams teams suggested OPR ranking, turns group four teams gap remaining teams: Scatterplot team contributions measured OPR (x axis) score without foul points (y axis).","code":"library(tidyverse) library(ggplot2)  # combine the OPR with the ranking not including fouls: all_points <- scores %>% get_ranking_by(score, score-foulPoints) all_points %>% ggplot(aes(x = `rating(score)`, y = `rating(score - foulPoints)`)) +    geom_point() + xlab(\"OPR\") +    ggrepel::geom_label_repel(aes(label = team_key), size=3, alpha = 0.6) +   geom_rug(length = unit(0.03, \"npc\")) +   scale_y_continuous(expand = c(0.2, 0.2)) +   scale_x_continuous(expand = c(0.2, 0.2)) +   coord_equal()"},{"path":"https://heike.github.io/tba/index.html","id":"worst-fouling-team","dir":"","previous_headings":"Example","what":"Worst fouling team","title":"Access to Data and Models for The Blue Alliance First Robotics Division","text":"details going score can used outcome measurement. number points given opponent team’s foul determined (2024 season) 5 points foul 2 points technical foul. list sorted worst offenders least offenders. negative number might interpreted team’s ability provoke fouls opponents.","code":"scores %>% filter(comp_level==\"qm\") %>%   get_ranking_by(2*foulCount+5*techFoulCount)  #> # A tibble: 12 × 3 #>    team_key     n `rating(2 * foulCount + 5 * techFoulCount)` #>    <chr>    <int>                                       <dbl> #>  1 frc9998     11                                      6.06   #>  2 frc9997     11                                      4.91   #>  3 frc6317     11                                      2.60   #>  4 frc525      11                                      2.38   #>  5 frc967      11                                      2.25   #>  6 frc9995     11                                      2.22   #>  7 frc3928     11                                      1.86   #>  8 frc9999     11                                      1.18   #>  9 frc4646     11                                      0.917  #> 10 frc9996     11                                      0.146  #> 11 frc6419     11                                      0.0238 #> 12 frc5041     11                                     -1.62"},{"path":"https://heike.github.io/tba/index.html","id":"best-at-categories","dir":"","previous_headings":"Example","what":"Best at categories","title":"Access to Data and Models for The Blue Alliance First Robotics Division","text":"Taking measures account, can see parallel coordinate plot , third place TBA ranking team frc9999 backed similar high performance contribution score, indicative lot luck /strategy qualifying matches. hand, team frc4646 top three performing teams except TBA ranking, indicating great pick alliance. Similarly, team frc525 make good contributing partner alliance. Parallel Coordinate Plot multiple measures showing different aspects team’s contribution. Higher better measures.","code":"detailed <- scores %>% filter(comp_level==\"qm\") %>%   get_ranking_by(score, score - foulPoints, autoPoints, teleopPoints, -1*(2*foulCount+5*techFoulCount))   # add the tba rating to the mix: tba_rating <- tba_ranking(\"iawes\", 2024) detailed <- detailed %>% left_join(tba_rating %>% select(team_key, TBA=rank), by=\"team_key\") library(ggpcp)    detailed %>%     mutate(      TBA = max(TBA)-TBA,     team_key = reorder(factor(team_key), TBA)      ) %>%    pcp_select(team_key, TBA, starts_with(\"rating\"), team_key) %>%    pcp_scale() %>%    ggplot(aes_pcp()) +     geom_pcp() +     geom_pcp_labels(size=3) +     xlab(\"\") + ylab(\"\") +     theme(axis.text.x = element_text(angle=30, hjust=1))"},{"path":"https://heike.github.io/tba/reference/calculate_tba_ranking.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the TBA rankings from qualifying match scores for the current season — calculate_tba_ranking","title":"Calculate the TBA rankings from qualifying match scores for the current season — calculate_tba_ranking","text":"TBA rankings can calculated partial information, example qualifying matches played scores posted.","code":""},{"path":"https://heike.github.io/tba/reference/calculate_tba_ranking.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the TBA rankings from qualifying match scores for the current season — calculate_tba_ranking","text":"","code":"calculate_tba_ranking(data)"},{"path":"https://heike.github.io/tba/reference/calculate_tba_ranking.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the TBA rankings from qualifying match scores for the current season — calculate_tba_ranking","text":"data tibble match information - assumed line corresponds score breakdown one team one event's match.","code":""},{"path":"https://heike.github.io/tba/reference/calculate_tba_ranking.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the TBA rankings from qualifying match scores for the current season — calculate_tba_ranking","text":"","code":"# example code if (FALSE) { # \\dontrun{ # get all matches for one event: clash_matches <- get_records(\"event/2025cttd/matches\") # get the score breakdown for each of the teams in each match clash_details <- get_match_details(clash_matches) # now get the rankings: calculate_tba_ranking(clash_details) } # }"},{"path":"https://heike.github.io/tba/reference/calculate_tba_ranking_2024.html","id":null,"dir":"Reference","previous_headings":"","what":"(Re-calculate) the TBA rankings from qualifying match scores — calculate_tba_ranking_2024","title":"(Re-calculate) the TBA rankings from qualifying match scores — calculate_tba_ranking_2024","text":"Note rankings historic events can sourced TBA call form get_records(\"/event/{event_key}/rankings\")$rankings","code":""},{"path":"https://heike.github.io/tba/reference/calculate_tba_ranking_2024.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(Re-calculate) the TBA rankings from qualifying match scores — calculate_tba_ranking_2024","text":"","code":"calculate_tba_ranking_2024(data)"},{"path":"https://heike.github.io/tba/reference/calculate_tba_ranking_2024.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(Re-calculate) the TBA rankings from qualifying match scores — calculate_tba_ranking_2024","text":"data tibble match information - assumed line corresponds score breakdown one team one event's match.","code":""},{"path":"https://heike.github.io/tba/reference/calculate_tba_ranking_2024.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"(Re-calculate) the TBA rankings from qualifying match scores — calculate_tba_ranking_2024","text":"","code":"# example code # get all matches for one event: clash_matches <- get_records(\"event/2024cttd/matches\") # get the score breakdown for each of the teams in each match clash_details <- get_match_details(clash_matches) # now get the rankings: calculate_tba_ranking_2024(clash_details) #> # A tibble: 42 × 9 #>    team_key ranking event    ranking_score avg_coop avg_match avg_auto avg_stage #>    <chr>      <int> <chr>            <dbl>    <dbl>     <dbl>    <dbl>     <dbl> #>  1 frc3284        1 2024cttd          3.12    0.875      56.2     21.5      4.38 #>  2 frc3928        2 2024cttd          2.62    0.75       54.4     25.1      5.38 #>  3 frc5126        3 2024cttd          2.5     0.875      53.1     20.2      3.5  #>  4 frc1769        4 2024cttd          2.38    0.375      44.6     17.9      4.25 #>  5 frc6424        5 2024cttd          2.25    0.625      57.5     21.4      6.38 #>  6 frc1987        6 2024cttd          2       0.625      54       27.4      4.62 #>  7 frc1982        7 2024cttd          2       0.5        47       17.9      4.12 #>  8 frc2357        8 2024cttd          1.88    0.875      56.6     24.2      7    #>  9 frc1108        9 2024cttd          1.88    0.625      58.2     24        5.38 #> 10 frc5013       10 2024cttd          1.88    0.375      50.1     17.8      3.88 #> # ℹ 32 more rows #> # ℹ 1 more variable: record <chr>"},{"path":"https://heike.github.io/tba/reference/check_key.html","id":null,"dir":"Reference","previous_headings":"","what":"Check the API key — check_key","title":"Check the API key — check_key","text":"Run status check given key. Returns TRUE key valid.","code":""},{"path":"https://heike.github.io/tba/reference/check_key.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check the API key — check_key","text":"","code":"check_key(key)"},{"path":"https://heike.github.io/tba/reference/check_key.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check the API key — check_key","text":"key character string. Authorization key read access TBA's APIv3 (2025).","code":""},{"path":"https://heike.github.io/tba/reference/check_key.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check the API key — check_key","text":"Boolean. TRUE, successful status check.","code":""},{"path":"https://heike.github.io/tba/reference/get_api_key.html","id":null,"dir":"Reference","previous_headings":"","what":"Read and set the API key for read access to TBA — get_api_key","title":"Read and set the API key for read access to TBA — get_api_key","text":"get_api_key checks whether key API Blue Aliance (TBA) available system environment. function warn user case key found provide instructions set key. order access API, user sign (free) account https://www.thebluealliance.com/account. functions package expect access TBA's read APIv3. created, call function set_api_key string found X-TBA-Auth-Key. set_api_key makes specified key available variable system environment current session.","code":""},{"path":"https://heike.github.io/tba/reference/get_api_key.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read and set the API key for read access to TBA — get_api_key","text":"","code":"get_api_key()  set_api_key(key, check = TRUE)"},{"path":"https://heike.github.io/tba/reference/get_api_key.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read and set the API key for read access to TBA — get_api_key","text":"key character string. Authorization key read access TBA's APIv3 (2025). check Boolean. key checked validity?","code":""},{"path":"https://heike.github.io/tba/reference/get_api_key.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read and set the API key for read access to TBA — get_api_key","text":"get_api_key returns key invisible object. set_api_key sets specified key environment variable.","code":""},{"path":"https://heike.github.io/tba/reference/get_match_details.html","id":null,"dir":"Reference","previous_headings":"","what":"Reformat match information into an approximate wide form — get_match_details","title":"Reformat match information into an approximate wide form — get_match_details","text":"records TBA come form one line match, two alliances corresponding score breakdowns list variables. get_match_details function returns score breakdown team match competition, .e. new dataset 6 times number rows original. HH: still need test: happens, surrogate team used match?","code":""},{"path":"https://heike.github.io/tba/reference/get_match_details.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reformat match information into an approximate wide form — get_match_details","text":"","code":"get_match_details(data)"},{"path":"https://heike.github.io/tba/reference/get_match_details.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reformat match information into an approximate wide form — get_match_details","text":"data tibble match records,  assumed form result call get_records(/event/{event_key}/matches).","code":""},{"path":"https://heike.github.io/tba/reference/get_match_details.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reformat match information into an approximate wide form — get_match_details","text":"tibble scores score breakdowns match team","code":""},{"path":"https://heike.github.io/tba/reference/get_match_details.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reformat match information into an approximate wide form — get_match_details","text":"","code":"clash_matches <- get_records(\"event/2024iawes/matches\") clash_details <- get_match_details(clash_matches)"},{"path":"https://heike.github.io/tba/reference/get_ranking_by.html","id":null,"dir":"Reference","previous_headings":"","what":"Rank teams in the qualifying matches of an event by a scoring variable — get_ranking_by","title":"Rank teams in the qualifying matches of an event by a scoring variable — get_ranking_by","text":"teams ranked (possible) contribution scoring variable.","code":""},{"path":"https://heike.github.io/tba/reference/get_ranking_by.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rank teams in the qualifying matches of an event by a scoring variable — get_ranking_by","text":"","code":"get_ranking_by(data, ..., method = \"normal\")"},{"path":"https://heike.github.io/tba/reference/get_ranking_by.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rank teams in the qualifying matches of an event by a scoring variable — get_ranking_by","text":"data tibble match information - assumed line corresponds score breakdown one team one event's match. ... numeric variables measuring aspects team's performance (qualifying matches). method character model calculated? Either normal loglinear.","code":""},{"path":"https://heike.github.io/tba/reference/get_ranking_by.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rank teams in the qualifying matches of an event by a scoring variable — get_ranking_by","text":"tibble ranked teams number matches (n) ranking based .","code":""},{"path":"https://heike.github.io/tba/reference/get_ranking_by.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Rank teams in the qualifying matches of an event by a scoring variable — get_ranking_by","text":"order model team's contribution, wide data set constructed, team variable, row one alliances one match score. alliance match consists exactly three robots. requirement checked modelling fulfilled, results warning. normal model fitted, , method = \"loglinear\" log-linear model fitted, values scoring variable non-negative. coefficients model can interpreted average (log) contribution team score match. OPR (offensive power rating) corresponds call get_ranking_by score variable.","code":""},{"path":"https://heike.github.io/tba/reference/get_ranking_by.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rank teams in the qualifying matches of an event by a scoring variable — get_ranking_by","text":"","code":"# example code # get all matches for one event: matches <- get_records(\"event/2024cttd/matches\") # get the score breakdown for each of the teams in each match match_details <- get_match_details(matches)  library(dplyr, quietly=TRUE) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union # now get the contribution to the score: match_details %>% filter(comp_level == \"qm\") %>% # get the qualifying matches   get_ranking_by(score) #> # A tibble: 42 × 3 #>    team_key     n `rating(score)` #>    <chr>    <int>           <dbl> #>  1 frc3284      8            44.6 #>  2 frc5126      8            35.6 #>  3 frc1108      8            31.6 #>  4 frc1987      8            30.7 #>  5 frc3928      8            28.1 #>  6 frc1986      8            26.8 #>  7 frc2357      8            26.8 #>  8 frc6424      8            24.9 #>  9 frc1769      8            23.9 #> 10 frc5801      8            23.9 #> # ℹ 32 more rows # These coefficients correspond to the OPR   # additionally get the team contributions to the score without counting the opponents' fouls: match_details %>% filter(comp_level == \"qm\") %>%    get_ranking_by(score, score-foulPoints) #> # A tibble: 42 × 4 #>    team_key     n `rating(score)` `rating(score - foulPoints)` #>    <chr>    <int>           <dbl>                        <dbl> #>  1 frc3284      8            44.6                         30.1 #>  2 frc5126      8            35.6                         22.9 #>  3 frc1108      8            31.6                         32.4 #>  4 frc1987      8            30.7                         27.5 #>  5 frc3928      8            28.1                         24.1 #>  6 frc1986      8            26.8                         28.7 #>  7 frc2357      8            26.8                         23.1 #>  8 frc6424      8            24.9                         28.7 #>  9 frc1769      8            23.9                         12.9 #> 10 frc5801      8            23.9                         21.0 #> # ℹ 32 more rows"},{"path":"https://heike.github.io/tba/reference/get_ranking_by_one.html","id":null,"dir":"Reference","previous_headings":"","what":"Rank teams in the qualifying matches of an event by a scoring variable — get_ranking_by_one","title":"Rank teams in the qualifying matches of an event by a scoring variable — get_ranking_by_one","text":"teams ranked (possible) contribution scoring variable.","code":""},{"path":"https://heike.github.io/tba/reference/get_ranking_by_one.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rank teams in the qualifying matches of an event by a scoring variable — get_ranking_by_one","text":"","code":"get_ranking_by_one(data, variable, method = \"normal\")"},{"path":"https://heike.github.io/tba/reference/get_ranking_by_one.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rank teams in the qualifying matches of an event by a scoring variable — get_ranking_by_one","text":"data tibble match information - assumed line corresponds score breakdown one team one event's match. variable numeric measurement. method character model calculated? Either normal loglinear.","code":""},{"path":"https://heike.github.io/tba/reference/get_ranking_by_one.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rank teams in the qualifying matches of an event by a scoring variable — get_ranking_by_one","text":"tibble ranked teams number matches (n) ranking based .","code":""},{"path":"https://heike.github.io/tba/reference/get_ranking_by_one.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Rank teams in the qualifying matches of an event by a scoring variable — get_ranking_by_one","text":"order model team's contribution, wide data set constructed, team variable, row one alliances one match score. alliance match consists exactly three robots. requirement checked modelling fulfilled, results warning. normal model fitted, , method = \"loglinear\" log-linear model fitted, values scoring variable non-negative. coefficients model can interpreted average (log) contribution team score match. OPR (offensive power rating) corresponds call get_ranking_by score variable.","code":""},{"path":"https://heike.github.io/tba/reference/get_ranking_by_one.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rank teams in the qualifying matches of an event by a scoring variable — get_ranking_by_one","text":"","code":"# example code # get all matches for one event: matches <- get_records(\"event/2024cttd/matches\") # get the score breakdown for each of the teams in each match match_details <- get_match_details(matches)  library(dplyr, quietly=TRUE) # now get the contribution to the score: match_details %>% filter(comp_level == \"qm\") %>% # get the qualifying matches   get_ranking_by_one(score) #> # A tibble: 42 × 3 #>    team_key `rating(score)`     n #>    <chr>              <dbl> <int> #>  1 frc3284             44.6     8 #>  2 frc5126             35.6     8 #>  3 frc1108             31.6     8 #>  4 frc1987             30.7     8 #>  5 frc3928             28.1     8 #>  6 frc1986             26.8     8 #>  7 frc2357             26.8     8 #>  8 frc6424             24.9     8 #>  9 frc1769             23.9     8 #> 10 frc5801             23.9     8 #> # ℹ 32 more rows # These coefficients correspond to the OPR   # team contribution to the score without counting the opponents' fouls: match_details %>% filter(comp_level == \"qm\") %>% # get the qualifying matches   get_ranking_by(score-foulPoints) #> # A tibble: 42 × 3 #>    team_key     n `rating(score - foulPoints)` #>    <chr>    <int>                        <dbl> #>  1 frc1108      8                         32.4 #>  2 frc3284      8                         30.1 #>  3 frc1986      8                         28.7 #>  4 frc6424      8                         28.7 #>  5 frc1987      8                         27.5 #>  6 frc3928      8                         24.1 #>  7 frc2357      8                         23.1 #>  8 frc5126      8                         22.9 #>  9 frc5801      8                         21.0 #> 10 frc935       8                         20.3 #> # ℹ 32 more rows"},{"path":"https://heike.github.io/tba/reference/get_records.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a dataframe with records from TBA — get_records","title":"Get a dataframe with records from TBA — get_records","text":"Blue Alliance API v3 specified https://www.thebluealliance.com/apidocs/v3. function get_records takes call TBA lists list returns, possible, records data frame. case results can converted data frame, returned list.","code":""},{"path":"https://heike.github.io/tba/reference/get_records.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a dataframe with records from TBA — get_records","text":"","code":"get_records(call)"},{"path":"https://heike.github.io/tba/reference/get_records.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a dataframe with records from TBA — get_records","text":"call call string list  https://www.thebluealliance.com/apidocs/v3#data-tag-list","code":""},{"path":"https://heike.github.io/tba/reference/get_records.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a dataframe with records from TBA — get_records","text":"tibble (list) content.","code":""},{"path":"https://heike.github.io/tba/reference/get_records.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a dataframe with records from TBA — get_records","text":"","code":"events <- get_records(\"events/2024\") events[grep(\"Corn\", events$name),] # yep, there is an event with 'Corn' in it #> # A tibble: 1 × 30 #>   address  city  country district$abbreviation division_keys end_date event_code #>   <chr>    <chr> <chr>   <chr>                 <list>        <chr>    <chr>      #> 1 3650 Wo… West… USA     NA                    <chr [0]>     2024-09… iawes      #> # ℹ 26 more variables: district$display_name <chr>, $key <chr>, $year <int>, #> #   event_type <int>, event_type_string <chr>, first_event_code <chr>, #> #   first_event_id <chr>, gmaps_place_id <chr>, gmaps_url <chr>, key <chr>, #> #   lat <dbl>, lng <dbl>, location_name <chr>, name <chr>, #> #   parent_event_key <chr>, playoff_type <int>, playoff_type_string <chr>, #> #   postal_code <chr>, short_name <chr>, start_date <chr>, state_prov <chr>, #> #   timezone <chr>, webcasts <list>, website <chr>, week <int>, year <int>  table(events$state_prov) #>  #>                 AL                 AR                 AZ                 BC  #>                  1                  2                 10                  1  #>            Beijing                 CA                 CO                 CT  #>                  1                 20                  3                  4  #>              Coah.                 DF                 FL                 GA  #>                  1                  1                  3                  6  #>               Gto.                 HI     Haifa District                 IA  #>                  1                  1                  6                  2  #>                 ID                 IL                 IN Jerusalem District  #>                  2                  4                  7                  1  #>                 KS                 KY                 LA                 MA  #>                  1                  1                  3                 11  #>                 MD                 ME                 MI                 MN  #>                  3                  3                 47                 13  #>                 MO                 MS                 MT               N.L.  #>                  6                  1                  1                  1  #>                 NC                 ND                 NH                 NJ  #>                 10                  3                  8                  8  #>                NSW                 NV                 NY                 OH  #>                  2                  1                 11                  5  #>                 OK                 ON                 OR                 PA  #>                  2                 16                  7                  7  #>                 QC                 RI                 SC                SON  #>                  1                  1                  4                  1  #>                 TN                 TX        Taipei City                 UT  #>                  2                 27                  1                  1  #>                 VA                VIC                 WA                 WI  #>                  9                  1                 10                  8  #>                 WV           İstanbul  #>                  1                  7   # now draw a map of all events in North America require(ggplot2) #> Loading required package: ggplot2 require(dplyr) events %>% slice(grep(\"America\", timezone)) %>%    filter(lat > 20) %>% # sorry, South America   ggplot(aes(x = lng, y = lat)) + geom_point() +    coord_equal()"},{"path":"https://heike.github.io/tba/reference/tba_ranking.html","id":null,"dir":"Reference","previous_headings":"","what":"Get team rankings for an event — tba_ranking","title":"Get team rankings for an event — tba_ranking","text":"Get team rankings event","code":""},{"path":"https://heike.github.io/tba/reference/tba_ranking.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get team rankings for an event — tba_ranking","text":"","code":"tba_ranking(event_code, season)"},{"path":"https://heike.github.io/tba/reference/tba_ranking.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get team rankings for an event — tba_ranking","text":"event_code character string event season four-digit year","code":""},{"path":"https://heike.github.io/tba/reference/tba_ranking.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get team rankings for an event — tba_ranking","text":"tibble rankings teams participated event","code":""},{"path":"https://heike.github.io/tba/reference/tba_ranking.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get team rankings for an event — tba_ranking","text":"","code":"tba_ranking(\"cttd\", 2024) # same team ranking as in example for `calc_ranking_tba_2024` #> # A tibble: 42 × 11 #>    team_key  rank `Ranking Score` `Avg Coop` `Avg Match` `Avg Auto` `Avg Stage` #>    <chr>    <int>           <dbl>      <dbl>       <dbl>      <dbl>       <dbl> #>  1 frc3284      1            3.13       0.88        56.2       21.5        4.38 #>  2 frc3928      2            2.63       0.75        54.4       25.1        5.38 #>  3 frc5126      3            2.5        0.88        53.1       20.2        3.5  #>  4 frc1769      4            2.38       0.38        44.6       17.9        4.25 #>  5 frc6424      5            2.25       0.63        57.5       21.4        6.38 #>  6 frc1987      6            2          0.63        54         27.4        4.63 #>  7 frc1982      7            2          0.5         47         17.9        4.13 #>  8 frc2357      8            1.88       0.88        56.6       24.2        7    #>  9 frc1108      9            1.88       0.63        58.2       24          5.38 #> 10 frc5013     10            1.88       0.38        50.1       17.8        3.88 #> # ℹ 32 more rows #> # ℹ 4 more variables: dq <int>, matches_played <int>, qual_average <lgl>, #> #   record <df[,3]>"}]
