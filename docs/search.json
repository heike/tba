[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 tba authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Heike Hofmann. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hofmann H (2025). tba: Access Data Models Blue Alliance First Robotics Division. R package version 0.0.0.9000.","code":"@Manual{,   title = {tba: Access to Data and Models for The Blue Alliance First Robotics Division},   author = {Heike Hofmann},   year = {2025},   note = {R package version 0.0.0.9000}, }"},{"path":"/index.html","id":"tba","dir":"","previous_headings":"","what":"Access to Data and Models for The Blue Alliance First Robotics Division","title":"Access to Data and Models for The Blue Alliance First Robotics Division","text":"goal tba package provide easy access match data events run first robotics division. Access based api Blue Alliance.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Access to Data and Models for The Blue Alliance First Robotics Division","text":"can install development version tba GitHub : order access API Blue Alliance, need sign (free) account. run","code":"# install.packages(\"pak\") pak::pak(\"heike/tba\") tba::set_api_key(key = \"jnn1ZiUfqPuA9UJyV9EVa3jtL5qudBBlYXKPEVQDeQgQgz5L8BypwjTzVKxtCs3W\")  # key is not valid, get your own!"},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Access to Data and Models for The Blue Alliance First Robotics Division","text":"basic example shows solve common problem: matches Clash Corn can accessed using event code 2024iawes:","code":"library(tba) ## basic example code  # Team Neutrino has team code `frc3928`  get_records(\"team/frc3928\") #> # A tibble: 1 × 11 #>   city  country key     name        nickname postal_code rookie_year school_name #>   <chr> <chr>   <chr>   <chr>       <chr>    <chr>             <int> <chr>       #> 1 Ames  USA     frc3928 Iowa 4-H F… Team Ne… 50011              2012 4-H         #> # ℹ 3 more variables: state_prov <chr>, team_number <int>, website <chr>  # In the 2024 season, the team attended the following events: events <- get_records(\"team/frc3928/events/2024\") events$name #> [1] \"Cow Town Throwdown\"        \"Galileo Division\"          #> [3] \"Iowa Regional\"             \"Clash in the Corn\"         #> [5] \"Central Missouri Regional\" library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union matches <- get_records(\"event/2024iawes/matches\") count(matches, comp_level) #> # A tibble: 3 × 2 #>   comp_level     n #>   <chr>      <int> #> 1 f              2 #> 2 qm            22 #> 3 sf             5 # 22 qualifying matches # 5 semi-finals # 2 finals"},{"path":"/reference/check_key.html","id":null,"dir":"Reference","previous_headings":"","what":"Check the API key — check_key","title":"Check the API key — check_key","text":"Run status check given key. Returns TRUE key valid.","code":""},{"path":"/reference/check_key.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check the API key — check_key","text":"","code":"check_key(key)"},{"path":"/reference/check_key.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check the API key — check_key","text":"key character string. Authorization key read access TBA's APIv3 (2025).","code":""},{"path":"/reference/check_key.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check the API key — check_key","text":"Boolean. TRUE, successful status check.","code":""},{"path":"/reference/get_api_key.html","id":null,"dir":"Reference","previous_headings":"","what":"Read and set the API key for read access to TBA — get_api_key","title":"Read and set the API key for read access to TBA — get_api_key","text":"get_api_key checks whether key API Blue Aliance (TBA) available system environment. function warn user case key found provide instructions set key. order access API, user sign (free) account https://www.thebluealliance.com/account. functions package expect access TBA's read APIv3. created, call function set_api_key string found X-TBA-Auth-Key. set_api_key makes specified key available variable system environment current session.","code":""},{"path":"/reference/get_api_key.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read and set the API key for read access to TBA — get_api_key","text":"","code":"get_api_key()  set_api_key(key, check = TRUE)"},{"path":"/reference/get_api_key.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read and set the API key for read access to TBA — get_api_key","text":"key character string. Authorization key read access TBA's APIv3 (2025). check Boolean. key checked validity?","code":""},{"path":"/reference/get_api_key.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read and set the API key for read access to TBA — get_api_key","text":"get_api_key returns key invisible object. set_api_key sets specified key environment variable.","code":""},{"path":"/reference/get_records.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a dataframe with records from TBA — get_records","title":"Get a dataframe with records from TBA — get_records","text":"Blue Alliance API v3 specified https://www.thebluealliance.com/apidocs/v3. function get_records takes call TBA lists list returns, possible, records data frame. case results can converted data frame, returned list.","code":""},{"path":"/reference/get_records.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a dataframe with records from TBA — get_records","text":"","code":"get_records(call)"},{"path":"/reference/get_records.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a dataframe with records from TBA — get_records","text":"call call string list  https://www.thebluealliance.com/apidocs/v3#data-tag-list","code":""},{"path":"/reference/get_records.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a dataframe with records from TBA — get_records","text":"tibble (list) content.","code":""},{"path":"/reference/get_records.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a dataframe with records from TBA — get_records","text":"","code":"events <- get_records(\"events/2024\") events[grep(\"Corn\", events$name),] # yep, there is an event with 'Corn' in it #> # A tibble: 1 × 30 #>   address  city  country district$abbreviation division_keys end_date event_code #>   <chr>    <chr> <chr>   <chr>                 <list>        <chr>    <chr>      #> 1 3650 Wo… West… USA     NA                    <chr [0]>     2024-09… iawes      #> # ℹ 26 more variables: district$display_name <chr>, $key <chr>, $year <int>, #> #   event_type <int>, event_type_string <chr>, first_event_code <chr>, #> #   first_event_id <chr>, gmaps_place_id <chr>, gmaps_url <chr>, key <chr>, #> #   lat <dbl>, lng <dbl>, location_name <chr>, name <chr>, #> #   parent_event_key <chr>, playoff_type <int>, playoff_type_string <chr>, #> #   postal_code <chr>, short_name <chr>, start_date <chr>, state_prov <chr>, #> #   timezone <chr>, webcasts <list>, website <chr>, week <int>, year <int>  table(events$state_prov) #>  #>                 AL                 AR                 AZ                 BC  #>                  1                  2                 10                  1  #>            Beijing                 CA                 CO                 CT  #>                  1                 20                  3                  4  #>              Coah.                 DF                 FL                 GA  #>                  1                  1                  3                  6  #>               Gto.                 HI     Haifa District                 IA  #>                  1                  1                  6                  2  #>                 ID                 IL                 IN Jerusalem District  #>                  2                  4                  7                  1  #>                 KS                 KY                 LA                 MA  #>                  1                  1                  3                 11  #>                 MD                 ME                 MI                 MN  #>                  3                  3                 47                 13  #>                 MO                 MS                 MT               N.L.  #>                  6                  1                  1                  1  #>                 NC                 ND                 NH                 NJ  #>                 10                  3                  8                  8  #>                NSW                 NV                 NY                 OH  #>                  2                  1                 11                  5  #>                 OK                 ON                 OR                 PA  #>                  2                 16                  7                  7  #>                 QC                 RI                 SC                SON  #>                  1                  1                  4                  1  #>                 TN                 TX        Taipei City                 UT  #>                  2                 27                  1                  1  #>                 VA                VIC                 WA                 WI  #>                  9                  1                 10                  8  #>                 WV           İstanbul  #>                  1                  7   # now draw a map of all events in North America require(ggplot2) #> Loading required package: ggplot2 require(dplyr) #> Loading required package: dplyr #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union events %>% slice(grep(\"America\", timezone)) %>%    filter(lat > 20) %>% # sorry, South America   ggplot(aes(x = lng, y = lat)) + geom_point() +    coord_equal()"}]
